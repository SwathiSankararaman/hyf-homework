Part 2: Meal application

--Creating Tables

SET NAMES utf8mb4;

CREATE TABLE `meal` (
  `id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `title` varchar(255) NOT NULL,
  `description` text NULL DEFAULT NULL,
  `location` varchar(255) NOT NULL,
  `when` DATETIME NOT NULL,
  `max_reservations` int(10) unsigned NOT NULL,
  `price` decimal(6,2) unsigned NOT NULL,
  `created_date` DATETIME NOT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;


CREATE TABLE `reservation` (
  `id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `number_of_guests` int(10) unsigned NOT NULL,
  `meal_id` int(10) unsigned NOT NULL,
  `created_date` DATETIME NOT NULL,
  PRIMARY KEY (`id`),
  CONSTRAINT `fk_mealinreservation` FOREIGN KEY (`meal_id`) REFERENCES `meal` (`id`) ON DELETE CASCADE
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

CREATE TABLE `review` (
  `id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `title` varchar(255) NOT NULL,
  `description` text NULL DEFAULT NULL,
  `meal_id` int(10) unsigned NOT NULL,
  `stars` int(10) unsigned NULL DEFAULT NULL,
  `created_date` DATETIME NOT NULL,
  PRIMARY KEY (`id`),
  CONSTRAINT `fk_mealinreview` FOREIGN KEY (`meal_id`) REFERENCES `meal` (`id`) ON DELETE CASCADE
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;


--Inserting values
--meal data

insert into meal (title, description, location, `when`, max_reservations, price, created_date) values ('Dosa', 'Indian rice and dal pancakes', 'Vesterbro', '2020-02-14 17:00:00', 25, 20, '2020-02-11 00:00:00');
insert into meal (title, description, location, `when`, max_reservations, price, created_date) values ('Jeera pulao', 'Indian rice with spices', 'Amager', '2020-02-14 17:00:00', 50, 25.99, '2020-02-11 00:00:00');
insert into meal (title, description, location, `when`, max_reservations, price, created_date) values ('Naan', 'Indian bread made in tandoor', 'Amager', '2020-02-14 17:00:00', 50, 100, '2020-02-11 00:00:00');
insert into meal (title, description, location, `when`, max_reservations, price, created_date) values ('Paneer butter masala', 'Spicy gravy made with Indian cottage cheese', 'Amager', '2020-02-14 17:00:00', 50, 25, '2020-02-11 00:00:00');
insert into meal (title, description, location, `when`, max_reservations, price, created_date) values ('Mango lassi', '', 'Valby', '2020-02-18 22:00:00', 50, 25, '2020-02-11 00:00:00');


--reservation data

insert into reservation (number_of_guests, meal_id, created_date) values (100, 2,'2020-02-11 12:41:00');
insert into reservation (number_of_guests, meal_id, created_date) values (2, 5,'2020-02-14 20:00:00');
insert into reservation (number_of_guests, meal_id, created_date) values (10, 4,'2020-02-11 17:00:00');

--review data
insert into review (title, description, meal_id, stars, created_date) values ('Excellent taste', '', 4, 3,'2020-02-09 00:00:00');
insert into review (title, description, meal_id, stars, created_date) values ('Delicious!!', 'The pancakes were very very crispy with a flavorful sauce as a dip. Definitely will recommend', 1, 4, '2020-02-01 00:00:00');
insert into review (title, description, meal_id, stars, created_date) values ('Too soft', 'This bread was indeed very different and was melting in mouth', 3, 4, '2020-02-01 00:00:00');


QUERIES
Meal:
1. SELECT * FROM meal;
2. insert into meal (title, description, location, `when`, max_reservations, price, created_date) values ('Chai', 'Indian style tea with milk', 'Fredriskberg', '2020-12-02 22:00:00', 100, 15.50, '2020-11-02 13:13:00');
3. SELECT * FROM meal WHERE id = 5;
4. UPDATE meal 
SET description = 'Yoghurt drink in mango flavor'
WHERE id = 5;
5. DELETE from meal
WHERE id = 6;

Reservation:
1. SELECT * FROM reservation;
2. insert into reservation (number_of_guests, meal_id, created_date) values (35, 5,'2020-02-14 17:00:00');
3. SELECT * FROM reservation WHERE id = 2;
4. UPDATE reservation 
SET number_of_guests = 25 
WHERE id = 4;
5. DELETE from reservation
WHERE id = 4;

Review:
1. SELECT * FROM review;
2. insert into review (title, description, meal_id, stars, created_date) values ('Too spicy', '', 4, 1,'2020-01-28 00:00:00');
3. SELECT * FROM review WHERE id = 1;
4. UPDATE review 
SET  description = 'Very good balanced curry'
WHERE id = 1;
5. DELETE from review
WHERE id = 4;

ADDITIONAL QUERIES
1. Get meals that has a price smaller than a specific price fx 90
SELECT * FROM meal WHERE price < 90

2. Get meals that still has available reservations
SELECT meal.*,
SUM(reservation.number_of_guests) AS number_of_reservations, meal.max_reservations - SUM(reservation.number_of_guests) AS vacancies
FROM meal INNER JOIN reservation ON meal.id = reservation.meal_id
WHERE reservation.number_of_guests < meal.max_reservations
GROUP BY meal.id;

3. Get meals that partially match a title. Rød grød med will match the meal with the title Rød grød med fløde
SELECT * FROM meal WHERE title LIKE '%butter%'

4. Get meals that has been created between two dates
SELECT * FROM meal WHERE created_date between '2020-02-13 00:00:00' AND '2020-02-15 00:00:00'

5.Get only specific number of meals fx return only 5 meals
SELECT * FROM meal LIMIT 5;

6. Get the meals that have good reviews
SELECT meal.*, review.stars, review.title AS review FROM meal 
INNER JOIN review ON meal.id = review.meal_id
WHERE review.stars >= 4;

7.Get reservations for a specific meal sorted by created_date
SELECT reservation.number_of_guests AS reservations, meal.title FROM reservation
INNER JOIN meal ON meal.id = reservation.meal_id
ORDER BY reservation.created_date;

8. Sort all meals by average number of stars in the reviews
SELECT meal.*, AVG(review.stars) as average_stars FROM meal
INNER JOIN review ON meal.id = review.meal_id
GROUP BY meal.id
ORDER BY average_stars;
